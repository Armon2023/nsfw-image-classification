package net.cnki.bdap.apps.articledetecterweb.controller;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;

import net.cnki.bdap.apps.articledetecterweb.view.UserArticle;
import net.cnki.bdap.frame.persistence.system.bean.BdapSystem;
import net.cnki.bdap.nlp.bean.WordDetectResult;
import net.cnki.bdap.nlp.persistence.bean.NLPResult;
import net.cnki.bdap.nlp.service.BdapNLPService;
import net.cnki.bdap.service.factory.BdapServiceFactory;
import net.cnki.bdap.web.base.BaseController;

@Controller
@RequestMapping("/articledetect")
public class ArticleDetectController extends BaseController<BdapSystem> {

	Logger logger = LoggerFactory.getLogger(ArticleDetectController.class);
	/**
	 * 增强检查.
	 */
	private String ENHANCE = "enhance";

	private final DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	@Override
	public String getSubjectId() {
		return null;
	}

	@Override
	public ModelAndView initOpen() {
		return null;
	}

	/**
	 * 页面传入参数检查.
	 *
	 * @param article
	 *            参数.
	 * @param libs
	 *            表.
	 * @return json data and cost.
	 */
	@RequestMapping(value = "/detect", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	@ResponseBody
	public Map<String, String> detect(@ModelAttribute("article") UserArticle article, String[] libs) {
		long startTime = System.currentTimeMillis();
		List<WordDetectResult> detectResult = getDetectResult(article.getArticle(), libs);
		long endTime = System.currentTimeMillis();
		String cost = String.valueOf(endTime - startTime);
		int characterCount = this.getCharacterCount(article.getArticle());
		return this.getData(cost, characterCount, detectResult);
	}

	/**
	 * 在地址栏拼参数.
	 *
	 * @param article
	 *            文本.
	 * @param checkModel
	 *            检查模式.
	 * @return json data and cost.
	 * @throws ExecutionException
	 * @throws InterruptedException
	 */
	@RequestMapping(value = "/check", method = RequestMethod.POST, produces = "application/json;charset=utf-8")
	@ResponseBody
	public Map<String, String> check(@ModelAttribute("article") UserArticle article,
			@ModelAttribute("checkModel") String checkModel) throws InterruptedException, ExecutionException {
		long startTime = System.currentTimeMillis();
		List<WordDetectResult> detectResult = new ArrayList<>();
		// language enhance check.
		if (ENHANCE.equalsIgnoreCase(checkModel)) {

		} else {
			// language normal check.
			String[] codes = { "3", "5", "4", "8", "12", "15", "16", "18", "20" };
			detectResult = getDetectResult(article.getArticle(), codes);
		}

		long endTime = System.currentTimeMillis();
		String cost = String.valueOf(endTime - startTime);
		int characterCount = this.getCharacterCount(article.getArticle());

		// saveDetectResult(article.getArticle(), detectResult, cost);
		Map<String, String> result = this.getData(cost, characterCount, detectResult);

		return result;
	}

	/**
	 * 将数据转成json放入map集合.
	 *
	 * @param cost
	 *            检查耗时.
	 * @param detectResult
	 *            查出的数据.
	 * @return ‘Map<String, String>’ json串.
	 */
	private Map<String, String> getData(String cost, int characterCount, List<WordDetectResult> detectResult) {
		String ctime = df.format(new Date());
		Map<String, String> map = new HashMap<>();
		String message = "";
		if (detectResult != null && detectResult.size() > 0) {
			message = String.format("%6d characters, found %3s issues, cost time: %5s ms, current time: %s \n",
					characterCount, detectResult.size(), cost, ctime);
			Gson gson = new Gson();
			map.put("result", gson.toJson(detectResult));

		} else {
			message = String.format("%6d characters, found %3s issues, cost time: %5s ms, current time: %s \n",
					characterCount, "no", cost, ctime);
			map.put("result", "");
		}

		System.out.printf(message);
		logger.info(message);

		map.put("cost", cost);
		map.put("count", characterCount + "");
		return map;
	}

	/**
	 * 判断查询的表,获取数据.
	 *
	 * @param article
	 *            用户输入的文字.
	 * @param codes
	 *            用户勾选的字库.
	 * @return 'List<WordDetectResult>'
	 */
	private List<WordDetectResult> getDetectResult(String article, String[] codes) {
		BdapNLPService nlpService = BdapServiceFactory.instance().getService(BdapNLPService.class);
		List<WordDetectResult> detectResult = nlpService.getDetectResult(article, codes);

		return detectResult;
	}

	private void saveDetectResult(String article, List<WordDetectResult> detectResult, String cost) {
		NLPResult nlpResult = new NLPResult();
		nlpResult.setText(article);
		nlpResult.setCharacterCount(this.getCharacterCount(article));
		nlpResult.setIssuesCount(detectResult.size());
		nlpResult.setCostTime(cost);
		nlpResult.setTestingTime(new Timestamp(System.currentTimeMillis()));
		nlpResult.setDetectResult(detectResult);

		BdapNLPService nlpService = BdapServiceFactory.instance().getService(BdapNLPService.class);
		nlpService.saveNlpResult(nlpResult);
	}

	private int getCharacterCount(String article) {
		int count = 0;
		if (null != article) {
			count = article.length();
		}
		return count;
	}
}
